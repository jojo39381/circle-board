{"ast":null,"code":"var _jsxFileName = \"/Users/josephyeh/Desktop/internship-circle/src/App.js\";\nimport React, { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './Task.jsx';\nimport Column from './Column.jsx';\nimport Header from './Header.jsx';\nimport AddScreen from './AddScreen.jsx';\nconst imageUrl = 'https://source.unsplash.com/random/?people/';\nvar months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nfunction getRandomHardDate() {\n  return months[Math.floor(Math.random() * 13)] + ' ' + Math.floor(Math.random() * 30);\n}\n\nfunction getRandomColor() {\n  return '#' + Math.floor(Math.random() * 16777215).toString(16);\n}\n\nconst itemsFromBackend = [{\n  id: uuid(),\n  content: 'Final QA',\n  img: imageUrl + uuid(),\n  date: getRandomHardDate(),\n  color: getRandomColor()\n}, {\n  id: uuid(),\n  content: 'Forms submit data properly',\n  img: imageUrl + uuid(),\n  date: getRandomHardDate(),\n  color: getRandomColor()\n}, {\n  id: uuid(),\n  content: 'Links across pages',\n  img: imageUrl + uuid(),\n  date: getRandomHardDate(),\n  color: getRandomColor()\n}];\nconst todo = [{\n  id: uuid(),\n  content: 'Final QA',\n  img: imageUrl + uuid(),\n  date: getRandomHardDate(),\n  color: getRandomColor()\n}, {\n  id: uuid(),\n  content: 'Forms submit data properly',\n  img: imageUrl + uuid(),\n  date: getRandomHardDate(),\n  color: getRandomColor()\n}, {\n  id: uuid(),\n  content: 'Links across pages',\n  img: imageUrl + uuid(),\n  date: getRandomHardDate(),\n  color: getRandomColor()\n}];\nconst columnsFromBackend = {\n  [uuid()]: {\n    name: 'Backlog',\n    items: itemsFromBackend\n  },\n  [uuid()]: {\n    name: 'To do',\n    items: todo\n  },\n  [uuid()]: {\n    name: 'In Progress',\n    items: []\n  },\n  [uuid()]: {\n    name: 'Done',\n    items: []\n  }\n};\n\nconst onDragEnd = (result, columns, setColumns) => {\n  if (!result.destination) return;\n  const {\n    source,\n    destination\n  } = result;\n\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n    setColumns({ ...columns,\n      [source.droppableId]: { ...sourceColumn,\n        items: sourceItems\n      },\n      [destination.droppableId]: { ...destColumn,\n        items: destItems\n      }\n    });\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns({ ...columns,\n      [source.droppableId]: { ...column,\n        items: copiedItems\n      }\n    });\n  }\n};\n\nfunction App() {\n  const [columns, setColumns] = useState(columnsFromBackend); // const [clicked, setClicked] = useState(false);\n  // function toggleAdd() {\n  //     console.log('lmao')\n  //     setClicked(!clicked)\n  // }\n\n  function addToColumn(destination, text) {\n    const updated = [...destination.items];\n    const object = {\n      id: uuid(),\n      content: 'Links across pages',\n      img: imageUrl + uuid(),\n      date: getRandomHardDate(),\n      color: getRandomColor()\n    };\n    updated.push(object);\n    setColumns({ ...columns,\n      [source.droppableId]: { ...destination.name,\n        items: copiedItems\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: result => onDragEnd(result, columns, setColumns),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, Object.entries(columns).map(([id, column]) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      key: uuid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }\n    }, column.name), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: id,\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }, (provided, snapshot) => {\n      return /*#__PURE__*/React.createElement(Column, {\n        provided: provided,\n        snapshot: snapshot,\n        column: column,\n        addToColumn: addToColumn,\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 37\n        }\n      });\n    })));\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/josephyeh/Desktop/internship-circle/src/App.js"],"names":["React","useState","v4","uuid","DragDropContext","Droppable","Draggable","Task","Column","Header","AddScreen","imageUrl","months","getRandomHardDate","Math","floor","random","getRandomColor","toString","itemsFromBackend","id","content","img","date","color","todo","columnsFromBackend","name","items","onDragEnd","result","columns","setColumns","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItems","removed","splice","index","column","copiedItems","App","addToColumn","text","updated","object","push","display","justifyContent","height","Object","entries","map","flexDirection","alignItems","margin","provided","snapshot"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {v4 as uuid} from 'uuid';\nimport {DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './Task.jsx';\nimport Column from './Column.jsx';\nimport Header from './Header.jsx';\nimport AddScreen from './AddScreen.jsx';\nconst imageUrl = 'https://source.unsplash.com/random/?people/';\nvar months = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n           \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ];\n\nfunction getRandomHardDate() {\n    return months[Math.floor(Math.random() * 13)] + ' ' + Math.floor(Math.random() * 30)\n}\n\nfunction getRandomColor() {\n    return '#'+Math.floor(Math.random()*16777215).toString(16);\n}\nconst itemsFromBackend = [\n    {id: uuid(), content: 'Final QA', img:imageUrl + uuid(), date: getRandomHardDate(), color: getRandomColor()},\n    {id: uuid(), content: 'Forms submit data properly', img:imageUrl + uuid(), date: getRandomHardDate(), color: getRandomColor()},\n    {id: uuid(), content: 'Links across pages', img:imageUrl + uuid(), date: getRandomHardDate(), color: getRandomColor()}\n]\nconst todo = [\n    {id: uuid(), content: 'Final QA', img:imageUrl + uuid(), date: getRandomHardDate(), color: getRandomColor()},\n    {id: uuid(), content: 'Forms submit data properly', img:imageUrl + uuid(), date: getRandomHardDate(), color: getRandomColor()},\n    {id: uuid(), content: 'Links across pages', img:imageUrl + uuid(), date: getRandomHardDate(), color: getRandomColor()}\n]\n\nconst columnsFromBackend = \n    {   [uuid()] : {\n            name: 'Backlog',\n            items: itemsFromBackend\n        },\n        [uuid()]: {\n            name: 'To do',\n            items: todo\n        },\n        [uuid()]: {\n            name: 'In Progress',\n            items: []\n        },\n        [uuid()]: {\n            name: 'Done',\n            items:[]\n        }\n\n    };\n\n\n\n\n\nconst onDragEnd = (result, columns, setColumns) => {\n    if (!result.destination) return;\n    const {source, destination } = result;\n    if(source.droppableId !== destination.droppableId) {\n        const sourceColumn = columns[source.droppableId];\n        const destColumn = columns[destination.droppableId];\n        const sourceItems = [...sourceColumn.items];\n        const destItems = [...destColumn.items];\n        const [removed] = sourceItems.splice(source.index, 1);\n        destItems.splice(destination.index, 0, removed);\n        setColumns({\n            ...columns,\n            [source.droppableId]:  {\n                ...sourceColumn, \n                items: sourceItems\n            },\n            [destination.droppableId]: {\n                ...destColumn, \n                items: destItems\n            }\n        })\n    }\n    else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...column,\n        items: copiedItems\n      }\n    });\n}\n\n\n\n\n\n};\nfunction App() {\n\n\n    const [columns, setColumns] = useState(columnsFromBackend);\n    // const [clicked, setClicked] = useState(false);\n    \n\n    // function toggleAdd() {\n    //     console.log('lmao')\n    //     setClicked(!clicked)\n        \n    // }\n\n    function addToColumn(destination, text) {\n        const updated = [...destination.items]\n        const object = {id: uuid(), content: 'Links across pages', img:imageUrl + uuid(), date: getRandomHardDate(), color: getRandomColor()}\n        updated.push(object)\n        setColumns({\n            ...columns,\n            [source.droppableId]: {\n              ...destination.name,\n              items: copiedItems\n            }\n          });\n        \n        \n\n    }\n\n   \n    \n    return (\n        <div>\n        <Header></Header>\n        <div style={{ display: 'flex', justifyContent: 'center', height: '100%'}}>\n           \n            <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)}>\n                {Object.entries(columns).map(([id, column]) => {\n                    return (\n                        <div style={{display:'flex', flexDirection: 'column', alignItems: 'center'}} key={uuid()}>\n                        <h2>{column.name}</h2>\n                        <div style ={{margin: 8}}>\n                        <Droppable droppableId={id} key={id}>\n                            {(provided, snapshot) => {\n                                return (\n                                    <Column provided={provided} snapshot={snapshot} column={column} addToColumn={addToColumn} id={id}/>\n                                    \n                                )\n                            }}\n                        </Droppable>\n                        {/* {clicked ?  \n                        <AddScreen toggleAdd={toggleAdd} addTask={addTask} column={id}/>  \n                     : null } */}\n                    </div>\n                    </div>\n                    )\n                })}\n            </DragDropContext>\n        </div>\n              \n        </div>\n    )\n}\nexport default App"]},"metadata":{},"sourceType":"module"}